const express = require("express");
const router = express.Router();
const { callClaude } = require ("../utils/claude.js");
const { Email } = require("../models");
const { listEmails } = require("../utils/Gmail_API.js");


router.get('/', async (req, res) => {
  try {
    const dbEmails = await Email.findAll();

    const gmailEmails = await listEmails();

    const mappedGmailEmails = gmailEmails.map((e) => ({
      id: e.id,
      sender: e.from,
      email: e.from,
      subject: e.subject,
      body: e.body,
      date: new Date(e.date),
      translated: false,
      summarised: false,
      autoResponse: false,
    }));

    const allEmails = [...dbEmails, ...mappedGmailEmails];

    allEmails.sort((a, b) => new Date(b.date) - new Date(a.date));

    res.json(allEmails);
  } catch (err) {
    console.error("Failed to fetch combined emails:", err);
    res.status(500).json({ error: "Failed to fetch emails" });
  }
});


router.get('/:id', async (req, res) => {
  try {
    const email = await Email.findByPk(req.params.id);
    if (!email) return res.status(404).json({ error: 'Email not found' });
    res.json(email);
  } catch (err) {
    console.error("Failed to fetch email by ID:", err);
    res.status(500).json({ error: "Failed to fetch email" });
  }
});

router.post('/create', async (req, res) => {
  try {
    const { sender, email, subject, body, date, translated, summarised, autoResponse } = req.body;
    const newEmail = await Email.create({ sender, email, subject, body, date, translated, summarised, autoResponse});
    res.status(201).json(newEmail);
  } catch (err) {
    console.error("Error creating email:", err);
    res.status(500).json({ error: "Failed to create email" });
  }
});
router.delete('/:id', async (req, res) => {
  try {
    const deleted = await Email.destroy({ where: { id: req.params.id } });
    if (deleted) return res.json({ message: 'Email deleted' });
    return res.status(404).json({ error: 'Email not found' });
  } catch (err) {
    console.error("Failed to delete email:", err);
    res.status(500).json({ error: "Failed to delete email" });
  }
});
router.put('/:id', async (req, res) => {
  try {
    const { sender, email, subject, body, date } = req.body;
    const [updated] = await Email.update(
      { sender, email, subject, body, date },
      { where: { id: req.params.id } }
    );
    if (updated) return res.json({ message: 'Email updated' });
    res.status(404).json({ error: 'Email not found' });
  } catch (err) {
    console.error("Update error:", err);
    res.status(500).json({ error: 'Failed to update email' });
  }
});
router.post("/translate/:id", async (req, res) => {
  try {
    const email = await Email.findByPk(req.params.id);
    if (!email) return res.status(404).json({ error: "Email not found" });

    const translatedText = await callClaude(`Translate this email to English:\n\n${email.body}`);

    const newEmail = await Email.create({
      sender: email.sender,
      email: email.email,
      subject: `[Translated] ${email.subject}`,
      body: `📘 Translated version:\n\n${translatedText}`,
      date: new Date(),
      translated: true,
    });

    res.json(newEmail);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Failed to translate email" });
  }
});

router.post("/summarise/:id", async (req, res) => {
  try {
    const email = await Email.findByPk(req.params.id);
    if (!email) return res.status(404).json({ error: "Email not found" });

    const summary = await callClaude(`Summarise this email:\n\n${email.body}`);

    const newEmail = await Email.create({
      sender: email.sender,
      email: email.email,
      subject: `[Summary] ${email.subject}`,
      body: `📝 Summary:\n\n${summary}`,
      date: new Date(),
      summarised: true,
    });

    res.json(newEmail);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Failed to summarise email" });
  }
});

router.post("/respond/:id", async (req, res) => {
  try {
    const email = await Email.findByPk(req.params.id);
    if (!email) return res.status(404).json({ error: "Email not found" });

    const responseText = await callClaude(`Write a professional response to this email:\n\n${email.body}`);

    const newEmail = await Email.create({
      sender: "Auto Response System",
      email: "no-reply@system.com",
      subject: `[Response to] ${email.subject}`,
      body: `✨ Autogenerated Response:\n\n${responseText}`,
      date: new Date(),
      autoResponse: true,
    });

    res.json(newEmail);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Failed to generate response" });
  }
});




module.exports = router;
